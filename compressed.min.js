const DEL="<del>$content</del>";const IMG="<img src='$src' alt='$alt' title='$title' />";const A="<a href='$href'>$content</a>";const B="<b>$content</b>";const I="<i>$content</i>";const CODE="<code>$content</code>";const FOOTNOTE="<sup><small>$content</small></sup>";const SPACE="";const ENTER=/^\n/;const HEADER=/^(#{1,6} .+(?=\n))/g;const HEADER2=/^(.+\n(={3,}|-{3,}))/g;const PARAGHAPH=/^(.+\n)+/g;const BLOCKQUOTE=/^(>+.+\n)((> )?.+\n)*/g;const HR=/^(-{3,}|={3,}|\*{3,})(?!.)/g;const LIST=/^(( *(-|\+|\*|\d\.) .+(\n(?!(-|\+|\*) ).+)*)\n)+/g;const CODECHUNK=/^(```.+?```)/gs;const TABLE=/^(((\|[^\|\n]+)+\|\n)(( |\||:|-)+)\n((\|[^\|\n]+)+\|\n)+)/g;const INLINECODECHUNK=/^(    .+\n)+/g;const ESCAPE="<ESCAPE\t\s\b\u3000>";function parseHeader(v_string){let result="";let setHeaderInTag=function(str,level){str=str.substring(level+1,v_string.length);return"<h"+level+">"+str+"</h"+level+">"};if(/^######/.test(v_string)){result=setHeaderInTag(v_string,6)}else if(/^#####/.test(v_string)){result=setHeaderInTag(v_string,5)}else if(/^####/.test(v_string)){result=setHeaderInTag(v_string,4)}else if(/^###/.test(v_string)){result=setHeaderInTag(v_string,3)}else if(/^##/.test(v_string)){result=setHeaderInTag(v_string,2)}else if(/^#/.test(v_string)){result=setHeaderInTag(v_string,1)}return result}function parseBlockquote(self,v_string){v_string=v_string.replaceAll(/^>/gm,"");let htmlContent=self.parseMarkdownTokens(v_string);return"<blockquote>"+htmlContent+"</blockquote>"}function parseHeaderByLine(v_string){let result="";if(/(-)$/.test(v_string)){v_string=v_string.substring(0,v_string.indexOf("\n"));result="<h1>"+v_string+"</h1>"}else{v_string=v_string.substring(0,v_string.indexOf("\n"));result="<h2>"+v_string+"</h2>"}return result}function parseCodechunk(v_string,v_lang){let result="";v_string=v_string.substring(v_string.indexOf("\n")+1,v_string.length-4);if(v_lang!==""){result="<pre><code class='language-"+v_lang+"'>"+v_string+"</code></pre>"}else{result="<pre><code class='nohighlight'>"+v_string+"</code></pre>"}return result}function parseList(self,v_string){let result="";let all=v_string.match(/^( *(-|\d\.) .+(\n(?! *(-|\d\.) ).+)*)/gm);let level=-1;let last_list_type=[];for(let content of all){let indentNumber=content.match(/^ */g)[0].length/self.indent;let d="<li>"+content.match(/(?<=^( *(-|\d\.) )).+(\n(?! *(-|\d\.) ).+)*/)[0]+"</li>";if(indentNumber>level){let isUlList=/(?<=^( *))- /.test(content);let tag=(isUlList?"<ul>":"<ol>");last_list_type.push(tag);d=tag+d;level++}else if(indentNumber<level){let number=level-indentNumber;let k=last_list_type.length-1;while(number!==0){let tag=(last_list_type[k]==="<ul>")?"</ul>":"</ol>";d=tag+d;last_list_type.length--;number--;level--;k--}}result+=d}for(let v of last_list_type){result+=(v==="<ul>")?"</ul>":"</ol>"}return result}function parseParagraph(v_string){v_string=v_string.replaceAll(/  $/gm,"<br>").replaceAll("\n","");result="<p>"+v_string+"</p>";return result}function parseTable(v_string){let alignment=[];let aligns=v_string.match(/(?<=^.+\n).+/g)[0];let strArray=aligns.match(/((?<=\|).+?(?=\|))/g);for(let k=0;k<strArray.length;k++){let v=strArray[k];if(v[0]===":"&&v[v.length-1]===":"){alignment.push("center")}else if(v[0]===":"){alignment.push("left")}else{alignment.push("right")}}v_string=v_string.replace(aligns+"\n","");let result="<table>";let lineNumber=0;while(v_string!==""){let content=v_string.match(/^.+/)[0].match(/((?<=\|).+?(?=\|))/);let html="";if(lineNumber===0){for(let k=0;k<content.length;k++){html+="<th style='text-align: "+alignment[k]+";'>"+content[k]+"</th>"}v_string=v_string.replace(/^.+\n?/g,"");html="<thead><tr>"+html+"</tr></thead><tbody>"}else{for(let k=0;k<content.length;k++){html+="<td style='text-align: "+alignment[k]+";'>"+content[k]+"</td>"}v_string=v_string.replace(/^.+\n?/g,"");html="<tr>"+html+"</tr>"}lineNumber++;result+=html}result+="</tbody></table>";return result}function parseInlineCodechunk(v_string){let content=v_string.replaceAll(/^    /gm,SPACE);return"<pre><code>"+content+"</code></pre>"}class MarkdownDoc{constructor(doc){if(!/\n\n$/.test(doc)){doc+="\n";return new MarkdownDoc(doc)}else{this.doc=doc;this.indent=4}}parseDocument(){let escapeChar=this.doc.match(/\\./g)||[];let doc=this.doc.replaceAll(/\\./g,ESCAPE);let html=this.parseMarkdownTokens(doc);html=this.parseKeywords(html);for(let v of escapeChar){html=html.replace(ESCAPE,v[1])}return html}parseKeywords(doc){{let text=doc.match(/!\[.*?\]\(.*( ".*?")?\)/g)||[];for(let v of text){let alt=v.match(/(?<=!\[).*?(?=\])/)[0];let src=v.match(/(?<=\().+?(?= |\))/)[0];let title=v.match(/((?<=").*?(?="))?/)[0];let html=IMG.replace("$alt",alt).replace("$src",src).replace("$title",title);doc=doc.replace(/!\[.*?\]\(.*( ".*?")?\)/,html)}}{let text=doc.match(/(?<!!)\[.*?\]\(.*\)/g)||[];for(let v of text){let content=v.match(/(?<=\[).*?(?=\])/)[0];let href=v.match(/(?<=\().+?(?=\))/)[0];let html=A.replace("$href",href).replace("$content",content);doc=doc.replace(/(?<!!)\[.*?\]\(.*\)/,html)}}{let text=doc.match(/(?<=<)https?:.+?(?=>)/g)||[];for(let v of text){let html="<a href='"+v+"'>"+v+"</a>";doc=doc.replace(/<https?:.+?>/,html)}}{let text=doc.match(/(?<=\*\*).+?(?=\*\*)/g)||[];for(let v of text){let html=B.replace("$content",v);doc=doc.replace(/\*\*.+?\*\*/,html)}}{let text=doc.match(/(?<=__).+?(?=__)/g)||[];for(let v of text){let html=B.replace("$content",v);doc=doc.replace(/__.+?__/,html)}}{let text=doc.match(/(?<=\*).+?(?=\*)/g)||[];for(let v of text){let html=I.replace("$content",v);doc=doc.replace(/\*.+?\*/,html)}}{let text=doc.match(/(?<=_).+?(?=_)/g)||[];for(let v of text){let html=I.replace("$content",v);doc=doc.replace(/_.+?_/,html)}}{let text=doc.match(/(?<=~~).+?(?=~~)/g)||[];for(let v of text){let html=DEL.replace("$content",v);doc=doc.replace(/~~.+?~~/,html)}}{let text=doc.match(/(?<=`).+?(?=`)/g)||[];for(let v of text){let html=CODE.replace("$content",v);doc=doc.replace(/`.+?`/,html)}}{let text=doc.match(/(?<=\[\^).+(?=\])/g)||[];for(let v of text){let html=FOOTNOTE.replace("$content",v);doc=doc.replace(/\[\^.+\]/,html)}}return doc}parseMarkdownTokens(doc){let ret="";while(doc!==""){if(ENTER.test(doc)){doc=doc.replace(ENTER,SPACE)}else if(HEADER.test(doc)){let token=doc.match(HEADER)[0];doc=doc.replace(token,SPACE);ret+=parseHeader(token)}else if(BLOCKQUOTE.test(doc)){let token=doc.match(BLOCKQUOTE)[0];doc=doc.replace(token,SPACE);token=token.replaceAll("> ",">");token=token.replaceAll(/^(?=[^>])/gm,">");ret+=parseBlockquote(this,token)}else if(HR.test(doc)){doc=doc.replace(HR,SPACE);ret+="<hr>"}else if(HEADER2.test(doc)){let token=doc.match(HEADER2)[0];doc=doc.replace(token,SPACE);ret+=parseHeaderByLine(token)}else if(CODECHUNK.test(doc)){let token=doc.match(CODECHUNK)[0];doc=doc.replace(token,SPACE);let lang=token.match(/(?<=```).*/)[0];ret+=parseCodechunk(token,lang)}else if(LIST.test(doc)){let token=doc.match(LIST)[0];doc=doc.replace(token,SPACE);token=token.replaceAll(/(?<=^ *)(\+|\*) /gm,"- ");token=token.replaceAll(/(  )$/gm,"<br>");ret+=parseList(this,token)}else if(TABLE.test(doc)){let token=doc.match(TABLE)[0];doc=doc.replace(token,SPACE);ret+=parseTable(token)}else if(INLINECODECHUNK.test(doc)){let token=doc.match(INLINECODECHUNK)[0];doc=doc.replace(token,SPACE);ret+=parseInlineCodechunk(token)}else if(PARAGHAPH.test(doc)){let token=doc.match(PARAGHAPH)[0];if(/^((-|\*|\+|!|    |\d\.) .+)/gm.test(token)){token=token.substring(0,token.indexOf(token.match(/^(-|\*|\+|!|    |\d\. .+)/gm)[0]))}doc=doc.replace(token,SPACE);token=token.replaceAll(/(  )$/gm,"<br>");ret+=parseParagraph(token)}}return ret}}